//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace geeWiz.Resources.Files {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Tooltips {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Tooltips() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("geeWiz.Resources.Files.Tooltips", typeof(Tooltips).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tools relating to cleaning the model..
        /// </summary>
        internal static string Audit {
            get {
                return ResourceManager.GetString("Audit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes all Fill and Line Patterns found in the current document that begin with the word &apos;Import&apos;.
        ///
        ///Condition(s) to run:
        ///- The current document is a project or family
        ///
        ///Warning:
        ///This tool will not provide a list to choose from - it will go straight to deletion..
        /// </summary>
        internal static string Audit_DeletePatterns {
            get {
                return ResourceManager.GetString("Audit_DeletePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a list of all unused View Filters in the current document, from which you can choose which ones to delete from the model.
        ///
        ///Condition(s) to run:
        ///- The current document is a project
        ///
        ///Note:
        ///This tool will check all Views and View Templates for used filters..
        /// </summary>
        internal static string Audit_PurgeFilters {
            get {
                return ResourceManager.GetString("Audit_PurgeFilters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a list of all unplaced rooms in the current document, from which you can choose which ones to delete from the model.
        ///
        ///Condition(s) to run:
        ///- The current document is a project.
        /// </summary>
        internal static string Audit_PurgeRooms {
            get {
                return ResourceManager.GetString("Audit_PurgeRooms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a list of all unused View Templates in the current document, from which you can choose which ones to delete from the model.
        ///
        ///Condition(s) to run:
        ///- The current document is a project
        ///
        ///Note:
        ///This tool will check all Views and View Family Types for assigned and default templates..
        /// </summary>
        internal static string Audit_PurgeTemplates {
            get {
                return ResourceManager.GetString("Audit_PurgeTemplates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tools relating to  exporting data from Revit..
        /// </summary>
        internal static string Export {
            get {
                return ResourceManager.GetString("Export", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exports the contents of the active schedule view to Excel.
        ///
        ///Condition(s) to run:
        ///- Current view is a schedule.
        /// </summary>
        internal static string Export_Schedule {
            get {
                return ResourceManager.GetString("Export_Schedule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exports selected sheets from Revit to DWG, using internal coordinates.
        ///
        ///Condition(s) to run:
        ///- The current document is a project
        ///
        ///Notes:
        ///The tool will apply a generic naming rule to exported documents.
        ///
        ///Shift + click:
        ///Uses shared coordinates instead..
        /// </summary>
        internal static string Export_SheetsDwg {
            get {
                return ResourceManager.GetString("Export_SheetsDwg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exports selected sheets from Revit to PDF.
        ///
        ///Condition(s) to run:
        ///- The current document is a project
        ///
        ///Notes:
        ///The tool will apply a generic naming rule to exported documents. The built-in Pdf exporter is used for the exporting process, which automatically detects page sizes.
        ///
        ///Shift + click:
        ///Shows crop boundaries (hidden by default)..
        /// </summary>
        internal static string Export_SheetsPdf {
            get {
                return ResourceManager.GetString("Export_SheetsPdf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Takes you to the project&apos;s github..
        /// </summary>
        internal static string General_About {
            get {
                return ResourceManager.GetString("General_About", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tools relating to importing information to Revit..
        /// </summary>
        internal static string Import {
            get {
                return ResourceManager.GetString("Import", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using the templated Excel file, creates new sheets and updates the names of existing ones provided.
        ///
        ///Condition(s) to run:
        ///- The current document is a project.
        /// </summary>
        internal static string Import_CreateSheets {
            get {
                return ResourceManager.GetString("Import_CreateSheets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saves a template for entering sheet information that can be imported back into Revit.
        ///
        ///Condition(s) to run:
        ///- The current document is a project
        ///
        ///Shift + click:
        ///Exports all sheet names and numbers to the template..
        /// </summary>
        internal static string Import_SheetsExcel {
            get {
                return ResourceManager.GetString("Import_SheetsExcel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copies Rebar Number (BM) to Schedule Mark as a backup. Acts as a check to stop BMs changing on already issued drawings.
        /// </summary>
        internal static string Rebar_FreezeRebar {
            get {
                return ResourceManager.GetString("Rebar_FreezeRebar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes &apos;Rebar Number&apos; (BM) based on user input.
        /// </summary>
        internal static string Rebar_Renumber {
            get {
                return ResourceManager.GetString("Rebar_Renumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tools relating to Rebar Visibility.
        /// </summary>
        internal static string RebarVisibility {
            get {
                return ResourceManager.GetString("RebarVisibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets all rebar to be linework in view (depreciated in RVT23+).
        /// </summary>
        internal static string RebarVisibility_SetNotSolidInView {
            get {
                return ResourceManager.GetString("RebarVisibility_SetNotSolidInView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets all rebar to be obscured in view.
        /// </summary>
        internal static string RebarVisibility_SetObscuredInView {
            get {
                return ResourceManager.GetString("RebarVisibility_SetObscuredInView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets all rebar to be solid in view (depreciated in RVT23+).
        /// </summary>
        internal static string RebarVisibility_SetSolidInView {
            get {
                return ResourceManager.GetString("RebarVisibility_SetSolidInView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets all rebar to be unobscured in view.
        /// </summary>
        internal static string RebarVisibility_SetUnobscuredInView {
            get {
                return ResourceManager.GetString("RebarVisibility_SetUnobscuredInView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tools relating to revision management..
        /// </summary>
        internal static string Revision {
            get {
                return ResourceManager.GetString("Revision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds a chosen revision to sheets, selected from a list. If the revision is already applied to a sheet, it will skip that sheet.
        ///
        ///Condition(s) to run:
        ///- Current document is a project
        ///
        ///Shift + click:
        ///Removes the chosen revision instead..
        /// </summary>
        internal static string Revision_BulkRev {
            get {
                return ResourceManager.GetString("Revision_BulkRev", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given chosen revisions and sheets, will generate an Excel based document transmittal (&apos;doctrans&apos;) that summarizes the revision numbers on those sheets.
        ///
        ///Condition(s) to run:
        ///- Current document is a project.
        /// </summary>
        internal static string Revision_DocTrans {
            get {
                return ResourceManager.GetString("Revision_DocTrans", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given a chosen revision, creates a new sheet set for all sheets with that revision.
        ///
        ///Condition(s) to run:
        ///- Current document is a project
        ///
        ///Note:
        ///If the sheet set already exists, it will be deleted and re-created..
        /// </summary>
        internal static string Revision_RevSet {
            get {
                return ResourceManager.GetString("Revision_RevSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tools relating to selection tasks..
        /// </summary>
        internal static string Select {
            get {
                return ResourceManager.GetString("Select", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables reveal hidden elements mode, then selects any elements that are hidden in the active view.
        ///
        ///Condition(s) to run:
        ///- The current document is a project..
        /// </summary>
        internal static string Select_GetHidden {
            get {
                return ResourceManager.GetString("Select_GetHidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For all currently selected sheets, will in turn select any titleblock(s) on them.
        ///
        ///Condition(s) to run:
        ///- Sheets are selected.
        /// </summary>
        internal static string Select_GetTtbs {
            get {
                return ResourceManager.GetString("Select_GetTtbs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Puts Revit into a mode where you can only select rooms.
        ///
        ///Condition(s) to run:
        ///- The current document is a project..
        /// </summary>
        internal static string Select_PickRooms {
            get {
                return ResourceManager.GetString("Select_PickRooms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Puts Revit into a mode where you can only select walls.
        ///
        ///Condition(s) to run:
        ///- The current document is a project..
        /// </summary>
        internal static string Select_PickWalls {
            get {
                return ResourceManager.GetString("Select_PickWalls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes any grouped elements (and groups) from the current selection.
        ///
        ///Condition(s) to run:
        ///- Elements are selected.
        /// </summary>
        internal static string Select_RemoveGrouped {
            get {
                return ResourceManager.GetString("Select_RemoveGrouped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This menu contains various tools to toggle geeWiz&apos;s features..
        /// </summary>
        internal static string Settings {
            get {
                return ResourceManager.GetString("Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggles the colouring of view tabs by document.
        ///
        ///Note:
        ///Tab colouring will override default Revit tab colouring behavior. Whilst this setting can be disabled afterwards, you will need to restart Revit to reinstate default tab colouring afterwards..
        /// </summary>
        internal static string Settings_ColourTabs {
            get {
                return ResourceManager.GetString("Settings_ColourTabs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggles between light and dark mode.
        ///
        ///Shift + Click:
        ///Sets the canvas theme to Dark instead of light..
        /// </summary>
        internal static string Settings_UiToggle {
            get {
                return ResourceManager.GetString("Settings_UiToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggles the Warden feature.
        ///
        ///Warden is a simple command interceptor, which will verify if you want to use bad practice commands before they execute..
        /// </summary>
        internal static string Settings_Warden {
            get {
                return ResourceManager.GetString("Settings_Warden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tools relating to worksets..
        /// </summary>
        internal static string Workset {
            get {
                return ResourceManager.GetString("Workset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates worksets from a fixed standard, chosen from a list of names.
        ///
        ///Condition(s) to run:
        ///- The current document is a project
        ///- The current document is workshared
        ///
        ///Notes:
        ///The tool will offer to rename the &apos;Shared Levels and Grids&apos; workset if it is found..
        /// </summary>
        internal static string Workset_Create {
            get {
                return ResourceManager.GetString("Workset_Create", resourceCulture);
            }
        }
    }
}
